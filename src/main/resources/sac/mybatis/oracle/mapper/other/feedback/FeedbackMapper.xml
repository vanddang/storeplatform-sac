<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Feedback">

	<!-- 사용후기 기등록 여부 조회  -->
	<select id="getRegProdNoti" parameterType="ProdNoti" resultType="ProdNoti">
      SELECT  /* FeedbackMapper.getRegProdNoti, 사용후기 기등록 여부 조회, 김현일/SK플래닛, 2014-02-04 */ 
              noti_seq
            , noti_dscr
        FROM
             (
              SELECT  a.noti_seq
                    , a.noti_dscr
                FROM  tb_dp_prod_noti a
               WHERE  1 = 1
                 AND  a.mbr_no = #{mbrNo}
                 AND  a.tenant_id = #{tenantId}
                 <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isNotBlank(chnlId)">
                 AND  a.prod_id = #{chnlId}
                 AND  a.catalog_id = #{prodId}
                 </if>
                 <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isBlank(chnlId)">
                 AND  a.prod_id = #{prodId}
                 </if>
                 AND  a.noti_type_cd = 'DP000401'
                 AND  a.del_yn = 'N'
                 AND  a.bad_noti_yn IN ( 'N', 'R' )
                 AND  a.spam_yn = 'N'
                 AND EXISTS (
                             <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isNotBlank(chnlId)">
                             SELECT  'X'
                               FROM  tb_dp_shpg_catalog sa
                              WHERE  sa.catalog_id = #{prodId}
                                AND  sa.chnl_cnt > 0
                             </if>
                             <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isBlank(chnlId)">
                             SELECT  'X'
                               FROM  tb_dp_prod sa
                              WHERE  sa.prod_id = a.prod_id
                             </if>
                             )
                ORDER BY reg_dt DESC
              )
       WHERE  ROWNUM <![CDATA[<=]]> 1
	</select>
	
	<!-- 사용후기 등록  -->
	<insert id="insertProdNoti" parameterType="ProdNoti">
      <selectKey keyProperty="notiSeq" resultType="string" order="BEFORE">
      SELECT  sq_dp_prod_noti.NEXTVAL
        FROM  DUAL
      </selectKey>
      INSERT  /* FeedbackMapper.insertProdNoti, 사용후기 등록, 김현일/SK플래닛, 2014-02-04 */ 
        INTO  tb_dp_prod_noti 
      ( tenant_id
      , noti_seq
      , noti_type_cd
      , mbr_no
      <!-- Shopping -->
      <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isNotBlank(chnlId)">
      , prod_id
      , catalog_id
      </if>
      <!-- Shopping 외 -->
      <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isBlank(chnlId)">
      , prod_id
      </if>
      <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isNotBlank(title)">
      , title
      </if>
      , noti_dscr
      , noti_score
      , spam_yn            
      , bad_noti_yn          
      , del_yn            
      , reg_id            
      , reg_dt            
      , mbr_telno            
      <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isNotBlank(fbPostYn)">
      , fb_post_yn
      </if>
      , reg_loc
      , device_model_cd
      <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isNotBlank(pkgVer)">
      , pkg_ver
      </if>
      )
      VALUES
      ( 
        #{tenantId}
      , #{notiSeq}
      , 'DP000401'
      , #{mbrNo}
      <!-- Shopping -->
      <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isNotBlank(chnlId)">
      , #{chnlId}
      , #{prodId}
      </if>
      <!-- Shopping 외 -->
      <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isBlank(chnlId)">
      , #{prodId}
      </if>
      <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isNotBlank(title)">
      , #{title}
      </if>
      , #{notiDscr}
      , 0
      , 'N'
      , 'N'
      , 'N'
      , #{regId}
      , SYSDATE
      , #{mbrTelno}
      <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isNotBlank(fbPostYn)">
      , #{fbPostYn}
      </if>
      , 'US004201'
      , #{deviceModelCd}
      <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isNotBlank(pkgVer)">
      , #{pkgVer}
      </if>
      )
	</insert>
	
    <!-- 사용후기 수정 -->
    <update id="updateProdNoti"  parameterType="ProdNoti">
      UPDATE  /* FeedbackMapper.updateProdNoti, 사용후기 수정, 김현일/SK플래닛 , 2014-02-04 */
              tb_dp_prod_noti
         SET  noti_dscr = #{notiDscr}
            <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isNotBlank(title)">
            , title = #{title}
            </if>
            , upd_dt = SYSDATE
            , noti_score = 0
            , seller_resp_opin = NULL
            , seller_resp_reg_dt = NULL
            , reg_loc = 'US004201'
            , device_model_cd = #{deviceModelCd}
            <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isNotBlank(pkgVer)">
            , pkg_ver = #{pkgVer}
            </if>
       WHERE  tenant_id = #{tenantId}
         AND  noti_seq = #{notiSeq}
         AND  mbr_no = #{mbrNo}
    </update>
	
	<!-- 사용후기 삭제 -->
	<update id="deleteProdNoti" parameterType="ProdNoti">
      UPDATE  /* FeedbackMapper.deleteProdNoti, 사용후기 삭제, 김현일/SK플래닛, 2014-02-04 */
              tb_dp_prod_noti
         SET  del_dt = SYSDATE
            , del_yn = 'Y'
       WHERE  tenant_id = #{tenantId}
         AND  noti_seq = #{notiSeq}
         AND  mbr_no = #{mbrNo}
	</update>
	 
	<!-- 사용후기 추천이력 삭제 -->  
	<delete id="deleteProdNotiGood" parameterType="ProdNotiGood">
      DELETE  /* FeedbackMapper.deleteProdNotiGood, 사용후기 추천이력 삭제, 김현일/SK플래닛, 2014-02-04 */
        FROM  tb_dp_prod_notigood
       WHERE  tenant_id = #{tenantId}
         AND  noti_seq = #{notiSeq}
         <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isNotBlank(mbrNo)">
         AND  mbr_no = #{mbrNo}
         </if>
	</delete>
	
	<!-- 기 평가 평점 조회 -->
	<select id="getRegMbrAvg" parameterType="MbrAvg" resultType="MbrAvg">
      SELECT  /* FeedbackMapper.getRegMbrAvg, 기 평가 평점 조회, 김현일/SK플래닛 , 2014-02-04 */
              avg_score
        FROM  tb_dp_mbr_avg
       WHERE  tenant_id = #{tenantId} 
         AND  mbr_no = #{mbrNo}
         AND  prod_id = #{prodId}
	</select>
	
	<!-- 회원별 평가 저장 -->
	<insert id="mergeMbrAvg" parameterType="MbrAvg" useGeneratedKeys="false">
      MERGE  /* FeedbackMapper.mergeMbrAvg, 회원별 평가 저장, 김현일/SK플래닛 , 2014-02-04 */ 
       INTO  tb_dp_mbr_avg
      USING  DUAL
         ON  ( 
                   tenant_id = #{tenantId} 
              AND  prod_id = #{prodId} 
              AND  mbr_no = #{mbrNo} 
             )
       WHEN  NOT MATCHED 
       THEN
             INSERT 
             ( 
               tenant_id
             , mbr_no
             , prod_id
             , avg_score
             , reg_id
             , reg_dt 
             )
             VALUES 
             ( 
               #{tenantId}
             , #{mbrNo}
             , #{prodId}
             , #{avgScore}
             , #{regId}
             , SYSDATE 
             )
       WHEN  MATCHED 
       THEN
             UPDATE
                SET  avg_score = #{avgScore}
                   , reg_dt = SYSDATE
	</insert>

    <!-- 회원평가정보 삭제 -->
    <delete id="deleteMbrAvg" parameterType="MbrAvg">
      DELETE  /* FeedbackMapper.deleteMbrAvg, 회원평가정보 삭제, 김현일/SK플래닛, 2014-02-04 */ 
        FROM  tb_dp_mbr_avg
       WHERE  tenant_id = #{tenantId}
         AND  prod_id = #{prodId}
         AND  mbr_no = #{mbrNo}
    </delete>
	
	
	<!-- 평점저장(기평가평점 수정) -->
	<update id="updateTenantProdStats" parameterType="TenantProdStats">
      UPDATE  /* FeedbackMapper.updateTenantProdStats, 평점저장(기평가평점 수정), 김현일/SK플래닛, 2014-02-04 */
              tb_dp_tenant_prod_stats
         SET  tot_evlu_score = NVL(tot_evlu_score, 0) + #{avgEvluScore} - #{preAvgScore}
            , upd_id = #{updId}
            , upd_dt = SYSDATE
            <if test="action == 'create'">
            , avg_evlu_score = ( ( NVL(tot_evlu_score, 0) + #{avgEvluScore} - #{preAvgScore} ) / NVL(paticpers_cnt, 0) )
            </if>
            <if test="action == 'remove'">
            , paticpers_cnt = paticpers_cnt - 1
            , avg_evlu_score = ( ( NVL(tot_evlu_score, 0) + #{avgEvluScore} - #{preAvgScore} ) / (NVL(paticpers_cnt, 0) - 1) )
            </if>
       WHERE  tenant_id = #{tenantId}
         AND  prod_id = #{prodId}
    </update>
	
	<!-- 평점저장 -->
	<insert id="mergeTenantProdStats" parameterType="TenantProdStats" useGeneratedKeys="false">
      MERGE  /* FeedbackMapper.mergeTenantProdStats, 평점저장, 김현일/SK플래닛, 2014-02-04 */
       INTO  tb_dp_tenant_prod_stats
      USING  DUAL
         ON  ( 
                   tenant_id = #{tenantId} 
              AND  prod_id = #{prodId}
             )
       WHEN  NOT MATCHED 
       THEN
             INSERT 
             ( 
               tenant_id
             , prod_id
             , avg_evlu_score
             , tot_evlu_score
             , paticpers_cnt
             , reg_id
             , reg_dt 
             )
             VALUES 
             ( 
               #{tenantId}
             , #{prodId}
             , #{avgEvluScore}
             , #{avgEvluScore}
             , 1
             , #{regId}
             , SYSDATE )
       WHEN  MATCHED 
       THEN
             UPDATE
                SET  avg_evlu_score = ((NVL(tot_evlu_score, 0) + #{avgEvluScore}) / (NVL(paticpers_cnt, 0) + 1))
                   , tot_evlu_score = NVL(tot_evlu_score, 0) + #{avgEvluScore}
                   , paticpers_cnt = NVL(paticpers_cnt, 0) + 1
                   , upd_id = #{updId}
                   , upd_dt = SYSDATE
	</insert>
	
	<!-- 평점 조회 -->
    <select id="getTenantProdStats" parameterType="TenantProdStats" resultType="TenantProdStats">
      SELECT  /* FeedbackMapper.xml.getTenantProdStats, 평점조회, 김현일/SK플래닛, 2014-02-04 */
              avg_evlu_score
            , paticpers_cnt
        FROM  tb_dp_tenant_prod_stats
       WHERE  tenant_id = #{tenantId} 
         AND  prod_id = #{prodId}
    </select>
    
    <!-- 평점 삭제 -->
    <update id="deleteTenantProdStats" parameterType="TenantProdStats">
      UPDATE  /* FeedbackMapper.deleteTenantProdStats, 평점삭제, 김현일/SK플래닛, 2014-02-04 */
              tb_dp_tenant_prod_stats
         SET  tot_evlu_score = 0
            , upd_id = #{updId}
            , upd_dt = SYSDATE
            , paticpers_cnt = 0
            , avg_evlu_score = 0
       WHERE  tenant_id = #{tenantId}
         AND  prod_id = #{prodId}
    </update>
	
	 <!-- (탈퇴회원 사용후기) 기 등록 여부 -->
	<select id="getProdNotiWDCount" parameterType="ProdNoti" resultType="int">
      SELECT  /* FeedbackMapper.getProdNotiWDCount, 탈퇴회원 사용후기 기등록 여부, 김현일/SK플래닛, 2014-02-04 */
              COUNT(*)
        FROM  tb_dp_prod_noti_wd
       WHERE  tenant_id = #{tenantId}
         AND  noti_seq = #{notiSeq}
    </select>
	
    <!-- (탈퇴회원 사용후기) 기 추천 여부 -->
    <select id="getProdNotiWDGoodCount" parameterType="ProdNoti" resultType="int">
      SELECT  /* FeedbackMapper.getProdNotiWDGoodCount, 탈퇴회원 사용후기 기추천 여부, 김현일/SK플래닛, 2014-02-04 */
              COUNT(*)
        FROM  tb_dp_prod_noti_wd a
            , tb_dp_prod_notigood b
       WHERE  a.tenant_id = b.tenant_id
         AND  a.noti_seq = b.noti_seq
         AND  a.noti_type_cd = 'DP000401'
         AND  a.del_yn = 'N'
         AND  a.bad_noti_yn IN ( 'N', 'R' )
         AND  a.spam_yn = 'N'
         AND  a.prod_id = #{prodId}
         AND  b.noti_seq = #{notiSeq}
         AND  b.mbr_no = #{mbrNo}
         AND  b.tenant_id = #{tenantId}
    </select>	
	
	<!-- 사용후기 추천 등록 -->
	<insert id="insertProdNotiGood" parameterType="ProdNotiGood">
      INSERT  /* FeedbackMapper.insertProdNotiGood, 사용후기 추천 등록, 김현일/SK플래닛, 2014-02-04 */
        INTO  tb_dp_prod_notigood 
      ( 
        tenant_id
      , noti_seq
      , mbr_no
      , reg_id
      , reg_dt 
      )
      VALUES 
      ( #{tenantId}
      , #{notiSeq}
      , #{mbrNo}
      , #{regId}
      , SYSDATE 
      )
	</insert>
	
	<!-- (탈퇴 회원 후기) 추천 수 증감처리 -->
    <update id="updateProdNotiWDGood" parameterType="ProdNotiGood">
      UPDATE  /* FeedbackMapper.updateProdNotiWDGood, 탈퇴회원후기 추천수 증감처리, 김현일/SK플래닛, 2014-02-04 */
              tb_dp_prod_noti_wd
         <if test="action == 'create'">
         SET  noti_score = NVL(noti_score, 0) + 1
         </if>
         <if test="action == 'remove'">
         SET  noti_score = NVL(noti_score, 0) - 1
         </if>
            , upd_dt = SYSDATE
       WHERE  tenant_id = #{tenantId} 
         AND  noti_seq = #{notiSeq}  
    </update>
    
    <!-- (일반회원 사용후기) 기 추천 여부 -->
    <select id="getProdNotiGoodCount" parameterType="ProdNoti" resultType="int">
      SELECT  /* FeedbackMapper.getProdNotiGoodCount, 일반회원 사용후기 기추천 여부, 김현일/SK플래닛, 2014-02-04 */
              COUNT(*)
        FROM  tb_dp_prod_noti a
            , tb_dp_prod_notigood b
       WHERE  a.tenant_id = b.tenant_id
         AND  a.noti_seq = b.noti_seq
         AND  a.noti_type_cd = 'DP000401'
         AND  a.del_yn = 'N'
         AND  a.bad_noti_yn IN ( 'N', 'R' )
         AND  a.spam_yn = 'N'
         AND  a.prod_id = #{prodId}
         AND  b.noti_seq = #{notiSeq}
         AND  b.mbr_no = #{mbrNo}
         AND  b.tenant_id = #{tenantId}
    </select>
    
    <!-- (일반회원 후기) 추천 수 증감처리 -->
    <update id="updateProdNotiGood" parameterType="ProdNotiGood">
      UPDATE  /* FeedbackMapper.updateProdNotiGood, 일반회원 후기 추천수 증감처리, 김현일/SK플래닛, 2014-02-04 */
              tb_dp_prod_noti
         <if test="action == 'create'">
         SET  noti_score = NVL(noti_score, 0) + 1
         </if>
         <if test="action == 'remove'">
         SET  noti_score = NVL(noti_score, 0) - 1
         </if>
            , upd_dt = SYSDATE
       WHERE  tenant_id = #{tenantId} 
         AND  noti_seq = #{notiSeq}  
    </update>
    
    <!-- 사용후기 전체 갯수 조회 -->
    <select id="getProdNotiCount" parameterType="ProdNoti" resultType="int">
      SELECT  /* FeedbackMapper.getProdNotiCount, 사용후기 전체 갯수 조회, 김현일/SK플래닛, 2014-02-04 */
              COUNT(*) AS total_count
        FROM  tb_dp_prod_noti
       WHERE  tenant_id = #{tenantId}
         AND  del_yn = 'N'
         AND  bad_noti_yn IN ( 'N', 'R' )
         AND  spam_yn = 'N'
         AND  noti_type_cd = 'DP000401'
         <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isNotBlank(notiSeq)">
         AND  noti_seq = #{notiSeq}
         </if>
         <!-- Shopping -->
         <if test="prodType == 'shopping'">
         AND  catalog_id = #{prodId}
         <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isNotBlank(chnlId)">
         AND  prod_id = #{chnlId}
         </if>
         </if>
         <!-- Shopping 외 -->
         <if test="prodType != 'shopping'">
         AND  prod_id = #{prodId}
         </if>             
    </select>
    
    <!-- 사용후기 전체 목록 조회 -->
    <select id="getProdNotiList" parameterType="ProdNoti" resultType="ProdNoti">
      SELECT  /* FeedbackMapper.getProdNotiList, 사용후기 전체 목록 조회, 김현일/SK플래닛, 2014-02-04 */
              a.noti_seq
            , a.mbr_no
            , a.seller_mbr_no
            , a.title
            , a.noti_dscr
            , NVL( a.noti_score, 0 ) AS noti_score
            , a.mbr_telno
            , a.reg_id
            , TO_CHAR(a.reg_dt,'YYYYMMDDHH24MISS') AS reg_dt
            , a.seller_resp_title
            , a.seller_resp_opin
            , NVL2( a.seller_resp_opin, TO_CHAR( a.seller_resp_reg_dt, 'YYYYMMDDHH24MISS' ), NULL ) AS seller_resp_reg_dt
            , a.cid
            , DECODE( a.mbr_no, #{mbrNo}, 'Y', 'N' ) AS self_yn
            , DECODE( a.mbr_no, a.seller_mbr_no, 'Y','N' ) AS sale_yn
            , DECODE( a.mbr_no, a.seller_mbr_no, 'seller', #{mbrNo}, 'mine', '' ) AS whose
            , ( CASE WHEN ( 
                           SELECT  COUNT(*)
                             FROM  tb_dp_prod_notigood l
                            WHERE  l.tenant_id = a.tenant_id
                              AND  l.mbr_no = #{mbrNo}
                              AND  l.noti_seq = a.noti_seq 
                           ) > 0 THEN 'Y'
                     ELSE 'N'
               END ) AS noti_yn
            , ( 
              SELECT  avg_score 
                FROM  tb_dp_mbr_avg 
               WHERE  tenant_id = a.tenant_id 
                 AND  prod_id = a.prod_id 
                 AND  mbr_no = a.mbr_no 
              ) AS avg_score
            , a.fb_post_yn
            , a.prod_id
            , a.expo_seller_nm
            , a.svc_grp_cd
       FROM (
             SELECT  ia.*
               FROM  (
                      SELECT  ia.*
                            , ROWNUM AS rnum
                        FROM (
                              SELECT ia.tenant_id
                                   , ia.noti_seq
                                   , ia.title
                                   , ia.noti_dscr
                                   , ia.reg_dt
                                   , ia.mbr_no
                                   , ia.reg_id
                                   , ia.mbr_telno
                                   , ia.noti_score
                                   , ia.seller_resp_title
                                   , ia.seller_resp_opin
                                   , ia.seller_resp_reg_dt
                                   , ia.prod_id
                                   , ia.fb_post_yn
                                   , ib.seller_mbr_no as seller_mbr_no
                                   , ib.cid
                                   , ib.svc_grp_cd
                                   , ib.expo_seller_nm
                               FROM  tb_dp_prod_noti ia
                                   , tb_dp_prod ib
                              WHERE  ia.tenant_id = #{tenantId}
                                AND  ib.prod_id = ia.prod_id
                                <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isNotBlank(notiSeq)">
                                AND  ia.noti_seq = #{notiSeq}
                                </if>
                                <!-- Shopping -->
                                <if test="prodType == 'shopping'">
                                AND  ia.catalog_id = #{prodId}
                                <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isNotBlank(chnlId)">
                                AND  ia.prod_id = #{chnlId} 
                                </if>
                                </if>
                                <!-- Shopping 외 -->
                                <if test="prodType != 'shopping'">
                                AND  ia.prod_id = #{prodId}
                                </if>
                                AND  ia.noti_type_cd = 'DP000401'
                                AND  ia.del_yn = 'N'
                                AND  ia.bad_noti_yn IN ( 'N', 'R' )
                                AND  ia.spam_yn = 'N'
                                <!-- 추천순 -->    
                              <if test="orderedBy == 'recommend'">
                              ORDER 
                                 BY  ia.noti_score DESC
                                   , ia.reg_dt DESC
                              </if>
                              <!-- 최신순 -->    
                              <if test="orderedBy == 'recent'">
                              ORDER 
                                 BY  ia.reg_dt DESC
                              </if>
                              ) ia
                       WHERE  ROWNUM <![CDATA[<=]]> #{endRow}
                     ) ia
              WHERE  ia.rnum BETWEEN #{startRow} AND #{endRow}     
            ) a
    </select>
    
    <!-- 자기가작성한 사용후기.  -->
    <select id="getMyProdNotiList" parameterType="ProdNoti" resultType="ProdNoti">
      SELECT  /* FeedbackMapper.getProdNotiList, 자기가작성한 사용후기, 김현일/SK플래닛, 2014-02-04 */
              a.noti_seq
            , a.mbr_no
            , a.seller_mbr_no
            , NVL2( a.title, a.title, NVL2( a.noti_dscr, NULL, default_msg ) ) AS title
            , NVL2( a.noti_dscr, a.noti_dscr, default_msg ) AS noti_dscr
            , NVL( a.noti_score, 0 ) AS noti_score
            , a.mbr_telno
            , a.reg_id
            , TO_CHAR(a.reg_dt,'YYYYMMDDHH24MISS') AS reg_dt
            , a.seller_resp_title
            , a.seller_resp_opin
            , NVL2( a.seller_resp_opin, TO_CHAR(a.seller_resp_reg_dt,'YYYYMMDDHH24MISS'), NULL ) AS seller_resp_reg_dt
            , a.cid
            , 'mine' AS WHOSE
            , ( CASE WHEN ( 
                           SELECT  COUNT(*)
                             FROM  tb_dp_prod_notigood l
                            WHERE  l.tenant_id = a.tenant_id
                              AND  l.mbr_no = #{mbrNo}
                              AND  l.noti_seq = a.noti_seq 
                          ) > 0 THEN 'Y'
                     ELSE 'N'
              END ) AS noti_yn
            , a.avg_score
            , a.fb_post_yn
            , a.prod_id
            , a.expo_seller_nm
            , a.svc_grp_cd
       FROM
            (
             SELECT  ia.*
                   , DECODE
                    ( ia.avg_score
                    , 1, #{defaultMsg1}
                    , 2, #{defaultMsg2}
                    , 3, #{defaultMsg3}
                    , 4, #{defaultMsg4}
                    , 5, #{defaultMsg5}
                    , NULL 
                    ) AS default_msg
               FROM
                    (
                     SELECT  ia.*
                           , ROWNUM AS rnum
                       FROM
                            (
                             SELECT  MAX( tenant_id ) AS tenant_id
                                   , MAX( noti_seq ) AS noti_seq
                                   , MAX( title ) AS title
                                   , MAX( noti_dscr ) AS noti_dscr
                                   , MAX( reg_dt ) AS reg_dt
                                   , MAX( mbr_no ) AS mbr_no
                                   , MAX( reg_id ) AS reg_id
                                   , MAX( mbr_telno ) AS mbr_telno
                                   , MAX( noti_score ) AS noti_score
                                   , MAX( seller_resp_title ) AS seller_resp_title
                                   , MAX( seller_resp_opin ) AS seller_resp_opin
                                   , MAX( seller_resp_reg_dt ) AS seller_resp_reg_dt
                                   , MAX( fb_post_yn ) AS fb_post_yn
                                   , MAX( prod_id ) AS prod_id
                                   , MAX( seller_mbr_no ) AS seller_mbr_no
                                   , MAX( cid ) AS cid
                                   , MAX( svc_grp_cd ) AS svc_grp_cd
                                   , MAX( avg_score ) AS avg_score
                                   , MAX( expo_seller_nm ) AS expo_seller_nm
                              FROM
                                  (
                                   SELECT  ia.tenant_id
                                         , ia.noti_seq
                                         , ia.title
                                         , ia.noti_dscr
                                         , ia.reg_dt
                                         , ia.mbr_no
                                         , ia.reg_id
                                         , ia.mbr_telno
                                         , ia.noti_score
                                         , ia.seller_resp_title
                                         , ia.seller_resp_opin
                                         , ia.seller_resp_reg_dt
                                         , ia.fb_post_yn
                                         , ia.prod_id
                                         , ib.seller_mbr_no as seller_mbr_no
                                         , ib.cid
                                         , ib.svc_grp_cd
                                         , ib.expo_seller_nm
                                         , NULL avg_score
                                     FROM  tb_dp_prod_noti ia
                                         , tb_dp_prod ib
                                    WHERE  ia.tenant_id = #{tenantId}
                                      AND  ib.prod_id = ia.prod_id
                                      AND  ia.mbr_no = #{mbrNo}
                                      <!-- Shopping -->
                                      <if test="prodType == 'shopping'">
                                      <if test="prodIds != null">
                                      AND  ia.catalog_id IN
                                      <foreach collection="prodIds" item="prodId" open="(" close=")" separator=",">
                                      #{prodId}
                                      </foreach>
                                      </if>
                                      <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isNotBlank(chnlId)">
                                      AND  ia.prod_id = #{chnlId}
                                      </if>
                                      </if>
                                      <!-- Shopping 외 -->
                                      <if test="prodType != 'shopping'">
                                      <if test="prodIds != null">
                                      AND  ia.prod_id IN
                                      <foreach collection="prodIds" item="prodId" open="(" close=")" separator=",">
                                      #{prodId}
                                      </foreach>
                                      </if>
                                      </if>
                                      AND  ia.noti_type_cd = 'DP000401'
                                      AND  ia.del_yn = 'N'
                                      AND  ia.bad_noti_yn IN ( 'N', 'R' )
                                      AND  ia.spam_yn = 'N'
                                   <!-- Shopping 외 ( 쇼핑은 평점관리 안함 )-->
                                   <if test="prodType != 'shopping'">
                                    UNION  ALL
                                   SELECT  ic.tenant_id AS tenant_id                               
                                         , NULL AS noti_seq
                                         , NULL AS title
                                         , NULL AS noti_dscr
                                         , ic.reg_dt AS reg_dt
                                         , ic.mbr_no AS mbr_no
                                         , NULL AS reg_id
                                         , NULL AS mbr_telno
                                         , NULL AS noti_score
                                         , NULL AS seller_resp_title
                                         , NULL AS seller_resp_opin
                                         , NULL AS seller_resp_reg_dt
                                         , NULL AS fb_post_yn
                                         , ic.prod_id
                                         , NULL AS seller_mbr_no
                                         , NULL AS cid
                                         , NULL AS svc_grp_cd
                                         , NULL AS expo_seller_nm
                                         , ic.avg_score
                                     FROM  tb_dp_mbr_avg ic
                                    WHERE  ic.tenant_id = #{tenantId} 
                                      AND  ic.mbr_no = #{mbrNo} 
                                      <if test="prodType != 'shopping'">
                                      <if test="prodIds != null">
                                      AND  ic.prod_id IN
                                      <foreach collection="prodIds" item="prodId" open="(" close=")" separator=",">
                                      #{prodId}
                                      </foreach>
                                      </if>
                                      </if>
                                   </if>
                                 )
                             GROUP 
                                BY  prod_id
                             ORDER 
                                BY  reg_dt DESC
                             ) ia
                      WHERE  ROWNUM <![CDATA[<=]]> #{endRow}
                    ) ia
              WHERE ia.rnum BETWEEN #{startRow} AND #{endRow}
            ) a
    </select>
    
    <!-- 자기가 작성한 사용후기 갯수 -->
    <select id="getMyProdNotiCount" parameterType="ProdNoti" resultType="int">
      SELECT  /* FeedbackMapper.getMyProdNotiCount, 자기가 작성한 사용후기 갯수, 김현일/SK플래닛, 2014-02-04 */
              COUNT(*) AS total_count
        FROM (
              SELECT MAX(prod_id) AS prod_id
                FROM
                    (
                     SELECT  la.prod_id
                       FROM  tb_dp_prod_noti la
                           , tb_dp_prod lb
                      WHERE  la.tenant_id = #{tenantId}
                        AND  lb.prod_id = lb.prod_id
                        AND  la.mbr_no = #{mbrNo}
                        <!-- Shopping -->
                        <if test="prodType == 'shopping'">
                        <if test="prodIds != null">
                        AND  la.catalog_id IN
                        <foreach collection="prodIds" item="prodId" open="(" close=")" separator=",">
                        #{prodId}
                        </foreach>
                        </if>
                        <if test="@com.skplanet.storeplatform.framework.core.util.StringUtils@isNotBlank(chnlId)">
                        AND  la.prod_id = #{chnlId}
                        </if>
                        </if>
                        <!-- Shopping 외 -->
                        <if test="prodType != 'shopping'">
                        <if test="prodIds != null">
                        AND  la.prod_id IN
                        <foreach collection="prodIds" item="prodId" open="(" close=")" separator=",">
                        #{prodId}
                        </foreach>
                        </if>
                        </if> 
                        AND  la.noti_type_cd = 'DP000401'
                        AND  la.del_yn = 'N'
                        AND  la.bad_noti_yn IN ( 'N', 'R' )
                        AND  la.spam_yn = 'N'
                        <!-- Shopping 외 ( 쇼핑은 평점관리 안함 )-->
                        <if test="prodType != 'shopping'">
                     UNION  ALL
                    SELECT  lc.prod_id
                      FROM  tb_dp_mbr_avg lc
                     WHERE  lc.tenant_id = #{tenantId} 
                       AND  lc.mbr_no = #{mbrNo} 
                       <if test="prodType != 'shopping'">
                       <if test="prodIds != null">
                       AND  lc.prod_id IN
                       <foreach collection="prodIds" item="prodId" open="(" close=")" separator=",">
                       #{prodId}
                       </foreach>
                       </if>
                       </if>
                       </if>
                    )
               GROUP 
                  BY  prod_id
             ) 
    </select>

    <!-- 판매자 댓글 -->
    <update id="updateSellerResp" parameterType="ProdNoti">
      UPDATE  /* FeedbackMapper.updateSellerResp, 판매자 댓글, 남궁석호/SK플래닛, 2014-02-10 */
              tb_dp_prod_noti
         SET  seller_resp_opin = #{sellerRespOpin}
            , seller_resp_title = #{sellerRespTitle}
            , seller_resp_reg_dt = SYSDATE
       WHERE  tenant_id = #{tenantId}
         AND  noti_seq = #{notiSeq}
    </update>

    <!-- 탈퇴 회원 사용후기 판매자 댓글 -->
    <update id="updateSellerRespWD" parameterType="ProdNoti">
      UPDATE  /* FeedbackMapper.updateSellerRespWD, 탈퇴회원 사용후기 판매자 댓글, 남궁석호/SK플래닛, 2014-02-10 */
              tb_dp_prod_noti_wd
         SET  seller_resp_opin = #{sellerRespOpin}
            , seller_resp_title = #{sellerRespTitle}
            , seller_resp_reg_dt = SYSDATE
       WHERE  tenant_id = #{tenantId}
         AND  noti_seq = #{notiSeq}
    </update>

    <!-- 평점, 다운로드 조회 -->
    <select id="getProdEvalInfo" parameterType="TenantProdStats" resultType="TenantProdStats">
      SELECT  /* FeedbackMapper.getProdEvalInfo, 평점 다운로드 조회, 남궁석호/SK플래닛 , 2014-02-13 */
             (
              SELECT  RTRIM ( XMLAGG ( XMLELEMENT (A, CONCAT (avg_score_pct, ',')).EXTRACT ('//text()')), ',')
                FROM ( 
                      SELECT  avg_score
                            , NVL (avg_count, 0) AS paticpers_cnt
                            , NVL (ROUND ( (avg_count / paticpers_cnt) * 100, 1), 0) AS avg_score_pct
                        FROM  (
                               SELECT  ib.avg_score
                                     , avg_count
                                     , (
                                        SELECT  paticpers_cnt
                                          FROM  tb_dp_tenant_prod_stats
                                         WHERE  tenant_id = #{tenantId}
                                           AND  prod_id = #{prodId}) AS paticpers_cnt
                                          FROM  (
                                                 SELECT  avg_score
                                                       , COUNT (avg_score) AS avg_count
                                                   FROM  tb_dp_mbr_avg
                                                  WHERE  tenant_id = #{tenantId}
                                                    AND  prod_id = #{prodId}
                                                  GROUP
                                                     BY  avg_score
                                                ) ia
                                              , (
                                                SELECT  avg_score
                                                  FROM (
                                                        SELECT  '1' AS avg_score FROM DUAL
                                                         UNION  ALL
                                                        SELECT  '2' AS avg_score FROM DUAL
                                                         UNION  ALL
                                                        SELECT  '3' AS avg_score FROM DUAL
                                                         UNION  ALL
                                                        SELECT  '4' AS avg_score FROM DUAL
                                                         UNION  ALL
                                                        SELECT  '5' AS avg_score FROM DUAL
                                                        )
                                                ) ib
                                         WHERE  ia.avg_score(+) = ib.avg_score
                                       )
                                       ORDER
                                          BY avg_score DESC
                               )
             ) AS avg_evlu_score_pcts
            , NVL (tot_evlu_score, 0) AS tot_evlu_score
            , NVL (prchs_cnt, 0) AS dwld_cnt
            , NVL ((CASE WHEN (avg_evlu_score <![CDATA[>]]> 0 AND avg_evlu_score <![CDATA[<]]> 1) THEN 1
                         WHEN avg_evlu_score <![CDATA[>]]> 5                                      THEN 5
                         ELSE ROUND (avg_evlu_score, 1)
              END), 0) AS avg_evlu_score
            , NVL (paticpers_cnt, 0) AS paticpers_cnt
            , TRIM ( NVL ( TO_CHAR ( (tot_evlu_score / paticpers_cnt) / 5.0 * 100, '99900.00'), '0')) AS avg_evlu_score_pct
        FROM  tb_dp_tenant_prod_stats
       WHERE  tenant_id = #{tenantId}
         AND  prod_id = #{prodId}            
    </select>
    
    <!-- 참여수 조회 -->
    <select id="getScoreList" parameterType="MbrAvgScore" resultType="MbrAvgScore">
      SELECT  /* FeedbackMapper.getScoreList, 참여수 조회, 남궁석호/SK플래닛, 2014-02-13 */
              avg_score
            , NVL (avg_count, 0) AS paticpers_cnt
            , NVL (ROUND ( (avg_count / paticpers_cnt) * 100, 1), 0) AS avg_score_pct
        FROM (
              SELECT  ib.avg_score
                    , avg_count
                    , (
                       SELECT  paticpers_cnt
                         FROM  tb_dp_tenant_prod_stats
                        WHERE  tenant_id = #{tenantId}
                          AND  prod_id = #{prodId}
                      ) AS paticpers_cnt
                FROM  (
                       SELECT  avg_score
                             , COUNT (avg_score) AS avg_count
                         FROM  tb_dp_mbr_avg
                        WHERE  tenant_id = #{tenantId}
                          AND  prod_id = #{prodId}
                        GROUP 
                           BY  avg_score
                      ) ia
                    , (
                       SELECT  avg_score
                         FROM  (
                                SELECT  '1' AS avg_score FROM DUAL
                                 UNION  ALL
                                SELECT  '2' AS avg_score FROM DUAL
                                 UNION  ALL
                                SELECT  '3' AS avg_score FROM DUAL
                                 UNION  ALL
                                SELECT  '4' AS avg_score FROM DUAL
                                 UNION  ALL
                                SELECT  '5' AS avg_score FROM DUAL
                               )
                      ) ib
               WHERE  ia.avg_score(+) = ib.avg_score
             )
       ORDER 
          BY  avg_score DESC
    </select>
</mapper>
